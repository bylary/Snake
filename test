#include <iostream>
#include <ncursesw/curses.h>
#include <vector>
#include <string>
#include <cstdlib> 



void ncurses_init_colors() {
	// wiÄcej o kolorach tu https://www.linuxjournal.com/content/programming-color-ncurses

	// musimy ustawiÄ jeĹli bÄdziemy uĹźywaÄ kolorowania konsoli
	start_color();
	// i zdefiniowaÄ pary kolorĂłw ktĂłre bÄdziemy uĹźywaÄ
	init_pair(1, COLOR_GREEN, COLOR_BLACK);
}

void ncurses_config() {
	// definiujemy kolory tekstu ktĂłre uĹźyjemy do kolorowania planszy
	ncurses_init_colors();
	// getch ma interpretowaÄ znaki specjalne takie jak KEY_UP
	keypad(stdscr, TRUE);
	// ustawiamy timeout dla getch (milisekundy)
	// po tym czasie program przejdzie dalej nawet jeĹli nie podasz klawisza
	timeout(5000);
	// podczas wpisywania z klawiatury nie powinna siÄ drukowaÄ literka
	noecho();
}
struct Coord {
	int x,y;
	Coord(int a=0,int b=0):x(a),y(b) {
	}
	void incX() {
		++x;
	}
	void incY() {
		++x;
	}
	void decX() {
		--x;
	}
	void decY() {
		--y;
	}
};
class MainWindow {
	private:
		int wXR;
		int wYB;
		int wYU;
		int wXL;
		int score = 1;
	public:
		WINDOW * mainwin;

		void window(int yB, int xR, int yU, int xL) {
			wXR = xR;
			wYB = yB;
			wYU = yU;
			wXL = xL;
		}
		void ncurses_init_colors() {
			// wiÄcej o kolorach tu https://www.linuxjournal.com/content/programming-color-ncurses

			// musimy ustawiÄ jeĹli bÄdziemy uĹźywaÄ kolorowania konsoli
			start_color();
			// i zdefiniowaÄ pary kolorĂłw ktĂłre bÄdziemy uĹźywaÄ
			init_pair(1, COLOR_GREEN, COLOR_BLACK);
		}

		void addScore() {
			score +=1;
		}
		void print_board(std::vector<Coord> position, int character,  int appleSkin, Coord apple) {
			mainwin = newwin(wYB,wXR,wYU,wXL);
//			int apple_y = apple.y;
//			int apple_x = apple.x;


			for(int h=0; h<wYB-1; h++) {
				mvwprintw(mainwin, h, 0,"#");
				mvwprintw(mainwin, h, wXR-1,"#");

			}

			for(int w=0; w<wXR; w++) {
				mvwprintw(mainwin, 0, w,"#");
				mvwprintw(mainwin, wYB-1, w,"#");
			}



			char const* pchar = std::to_string(score).c_str();

			mvwprintw(mainwin, 0, 1,"SNAKE");
			mvwprintw(mainwin, 0, 7,"SCORE:");
			mvwprintw(mainwin, 0, 13, pchar);

			// operujemy na wirtualnym ekranie bÄdÄcym buforem ekranu
			// a nastÄpnie wyĹwietlamy bufor w terminalu funkcjÄ refresh

			//clear(); // czyĹci wirtualny ekran (lepiej byĹo by czyĹciÄ jeden znak albo jedna linie)

			attron(COLOR_PAIR(1)); // ustawiamy wczeĹniej zdefiniowanÄ perÄ kolorĂłw
			// (moĹźna uĹźyÄ mvaddch zamiast dwĂłch funcji)
			//move(position_y, position_x); // skaczemy kursorem do danej pozycji
			//addch(character); // drukujemy podany znak
//	movew(mainwin,apple_y,apple_x);
//	addch(apple);
			mvwaddch(mainwin,apple.y,apple.x, appleSkin);
			for(int i=0; i < position.size(); i++) {
				mvwaddch(mainwin,position[i].y,position[i].x,character);
			}

			move(0, 0); // aby migajÄcy kursor nam nie przeszkadzaĹfsdfsdfsadfsda
			attroff(COLOR_PAIR(1)); // przywracamy domyĹlny kolor

			//refresh(); // wyĹwietlamy zawartoĹÄ wirtualnego ekranu dopiero po refresh
		}
};

class Snake {

	private:
		std::vector<Coord> snake;

	public:
		Snake(Coord vektor) {
			eat(vektor);
		}
		void eat(Coord c) { // push apple
			snake.push_back(c);

		}
		void moveSnake(Coord C) {
		snake.pop_back();
		snake.insert(snake.begin(),C);
		}

		int size() {
			return snake.size();
		}
		std::vector<Coord> vektors() {
			return snake;
		}

};

int letter(int character) {

	switch(character) {
		case 'S':
			return 'N';
		case 'N':
			return 'A';
		case 'A':
			return 'K';
		case 'K':
			return 'E';
		case 'E':
			return 'S';
		default:
			break;
	}
	return character;
}
int apple(Coord apple, Coord snakeHead) {
	if(apple.x == snakeHead.x && apple.y == snakeHead.y) {
		return true;
	}

	return false;
}

Coord changeApple(Coord &apple, int upper_limit, int bottom_limit, int left_limit, int right_limit ){
	apple.x = rand() % (right_limit+1-left_limit) + left_limit;
	apple.y = rand() % (bottom_limit+1-upper_limit) + upper_limit;
	return apple;
}

int main(void) {

	std::cout<<"\e[8;45;80t";
	// inicjalizacja ncurses//
	//WINDOW * mainwin = initscr();
	initscr();
	MainWindow mainwin = MainWindow();
//	Snake snake;

	ncurses_config();



	int last_character = 'S';
	int last_position_x = 15;
	int last_position_y = 15;
	Coord pos(last_position_x, last_position_y);

	int upper_limit = 0;
	int bottom_limit = 25;
	int left_limit = 0;
	int right_limit = 50;
	int przegrana = false;

	mainwin.window(bottom_limit, right_limit, upper_limit,left_limit);
	Coord snake_vektor(last_position_x,last_position_y+1);

	Snake snake(snake_vektor);
	snake.eat(Coord(last_position_x,last_position_y));

	//int length  = 1;
	Coord apple1(20,2);
//	apple.x = 20;
//	apple.y = 2;


	int apple_character = '@';
	int temporary = '*';

	while(1==1) {
		wclear(mainwin.mainwin);
		int input = getch();
		if(input != ERR) {
			switch(input) {
				case KEY_UP:
					if(apple(apple1, pos)) {
						mainwin.addScore();
						pos.incY();
						snake.eat(pos);
						changeApple(apple1,upper_limit+1,bottom_limit-1,left_limit+1,right_limit-1);
					}
					--pos.y;
					snake.moveSnake(pos);
					break;
				case KEY_DOWN:
					if(apple(apple1,pos)) {
						mainwin.addScore();
						//snake.eat(tail(pos,"y","-"));
						pos.decY();
						snake.eat(pos);
						changeApple(apple1,upper_limit+1,bottom_limit-1,left_limit+1,right_limit-1);
					}
					++pos.y;
					snake.moveSnake(pos);
					break;
				case KEY_LEFT:
					if(apple(apple1,pos)) {
						mainwin.addScore();
						pos.incX();
						snake.eat(pos);
						changeApple(apple1,upper_limit+1,bottom_limit-1,left_limit+1,right_limit-1);
					}
					--pos.x;
					snake.moveSnake(pos);
					break;
				case KEY_RIGHT:
					if(apple(apple1,pos)) {
						mainwin.addScore();
						pos.decX();
						snake.eat(pos);
						changeApple(apple1,upper_limit+1,bottom_limit-1,left_limit+1,right_limit-1);
					}
					++pos.x;
					snake.moveSnake(pos);
					break;
				default:
					break;
			}

		}

		if(pos.x < left_limit+1) {
			pos.x = right_limit-2;
			//przegrana = true;
		}
		if(pos.x > right_limit-2) {
			pos.x = left_limit+1;
			//przegrana = true;
		}
		if(pos.y < upper_limit+1) {
			pos.y = bottom_limit-2;
			//przegrana = true;
		}
		if(pos.y > bottom_limit-2) {
			pos.y = upper_limit+1;
			//przegrana = true;
		}



		mainwin.print_board(snake.vektors(), temporary,  apple_character, apple1);

		if(przegrana) {
			break;
		}
		//printw(std::to_string(snake_vektor.x).c_str());
		wrefresh(mainwin.mainwin);



	}
}
